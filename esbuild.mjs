// Thank you: https://github.com/aidenlx/media-extended/blob/main/esbuild.js
import esbuild from 'esbuild';
import inlineWorkerPlugin from 'esbuild-plugin-inline-worker';
import fs from 'fs';

// https://github.com/obsidianmd/obsidian-sample-plugin/blob/master/esbuild.config.mjs
// TODO: look into using builtins instead of specifying platform: node


/**
 * The `./build` directory must be created before building the plugin
 */

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD.
If you want to view the source, visit the pluginsâ€™ github repository.
*/
`;

const isProd = process.env.BUILD === 'production';

let outputDirectory = 'build';
if (!isProd){
	outputDirectory = 'tests/Dev-Metadata-Extractor/.obsidian/plugins/metadata-extractor';
}

const copyManifest = {
	name: 'copy-manifest',
	setup: (build) => {
		build.onEnd(() => {
			fs.copyFileSync('manifest.json', `${outputDirectory}/manifest.json`);
		});
	},
};

(async () => {
	try {
		await esbuild.build({
			entryPoints: ['src/main.ts'],
			bundle: true,
			watch: !isProd,
			platform: 'node',
			external: ['obsidian'],
			format: 'cjs',
			banner: { js: banner },
			sourcemap: isProd ? false : 'inline',
			minify: isProd,
			treeShaking: true,
			define: {
				'process.env.NODE_ENV': JSON.stringify(process.env.BUILD),
			},
			outfile: `${outputDirectory}/main.js`,
			logLevel: 'info',
			plugins: [
				copyManifest,
				inlineWorkerPlugin(),
			],
		});
	} catch (err) {
		console.error(err);
		process.exit(1);
	}
})();
